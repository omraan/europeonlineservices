'use strict';
/*jshint asi: true*/

var test = require('tap').test
var generator = require('..');

var foo = '' + function foo () {
  var hello = 'hello';
  var world = 'world';
  console.log('%s %s', hello, world);
}

var bar = '' + function bar () {
  console.log('yes?');
}

function decode(base64) {
  return new Buffer(base64, 'base64').toString();
} 

function inspect(obj, depth) {
  console.error(require('util').inspect(obj, false, depth || 5, true));
}

test('generated mappings', function (t) {

  t.test('one file no offset', function (t) {
    var gen = generator()
      .addGeneratedMappings('foo.js', foo)

    t.deepEqual(
      gen._mappings()
    , [ { generatedLine: 1,
          generatedColumn: 0,
          originalLine: 1,
          originalColumn: 0,
          source: 'foo.js',
          name: null },
        { generatedLine: 2,
          generatedColumn: 0,
          originalLine: 2,
          originalColumn: 0,
          source: 'foo.js',
          name: null },
        { generatedLine: 3,
          generatedColumn: 0,
          originalLine: 3,
          originalColumn: 0,
          source: 'foo.js',
          name: null },
        { generatedLine: 4,
          generatedColumn: 0,
          originalLine: 4,
          originalColumn: 0,
          source: 'foo.js',
          name: null },
        { generatedLine: 5,
          generatedColumn: 0,
          originalLine: 5,
          originalColumn: 0,
          source: 'foo.js',
          name: null } ]      
      , 'generates correct mappings'
    )

    t.deepEqual(
        JSON.parse(decode(gen.base64Encode()))
      , {"version":3,"file":"","sources":["foo.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA","sourceRoot":""}
      , 'encodes generated mappings'
    )
    t.equal(
        gen.inlineMappingUrl()
      , '//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIifQ=='
      , 'returns correct inline mapping url'
    )
    t.end()
  })

  t.test('two files no offset', function (t) {
    var gen = generator()
      .addGeneratedMappings('foo.js', foo)
      .addGeneratedMappings('bar.js', bar)

    t.deepEqual(
        gen._mappings()
      , [ { generatedLine: 1,
            generatedColumn: 0,
            originalLine: 1,
            originalColumn: 0,
            source: 'foo.js',
            name: null },
          { generatedLine: 2,
            generatedColumn: 0,
         